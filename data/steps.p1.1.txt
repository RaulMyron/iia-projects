'''
ferramentas (bibliotecas python) utilizadas:

pandas: para manipulação de dados.
numpy: para operações numéricas.
geopy: para cálculos de distância geográfica.
folium: para visualização em mapas.
'''

1. descoberta da localização das associações:
as coordenadas de latitude e longitude para cada uma das 17 associações foram coletadas manualmente. 
fontes como google maps, consulta de cnpj, perfis em facebook e instagram foram utilizadas. 
esse processo de curadoria manual resultou no arquivo associacao_posicao.txt.
em casos onde uma mesma associação possuía múltiplos endereços, uma localização principal foi assumida para simplificar. 
esses dados são carregados no DataFrame df_associacoes.

2. extração do que cada associação vende:
para identificar os produtos comercializados na prática por cada associação, foram analisados editais de alimentação do gdf, 
resultando no associacao_vende.txt. esse arquivo relaciona a região da associação com os alimentos que ela pode fornecer. 
a extração foi manual, com suporte de um autenticador python para alguns processos. a partir disso, 
foi possível montar uma lista dos produtos oferecidos por associação e também uma lista geral de produtos_escopo únicos. 
um mapeamento_produtos também foi criado para padronizar nomes diferentes para o mesmo item (ex: "limão taiti" para "limão").

3. utilização de dados nutricionais (taco):
a base de dados nutricionais é a tabela brasileira de composição de alimentos (taco). 
dela, foram extraídas informações como calorias, vitaminas, fibras, etc., 
para os alimentos do produtos_escopo. para alimentos específicos não encontrados na taco 
(como abóbora cabotiá - 9001, coentro - 9002, hortelã - 9003, limão taiti - 9004, repolho verde - 9005), 
os dados foram adicionados manualmente após pesquisa em tabelas do ibge ou fontes similares. 
essas informações são usadas para o filtro de objetivo_nutricional e para calcular o score s_nutri.

4. extração de dados da emater-df (relevância regional):
dados da emater-df sobre produção agrícola por região (área plantada, toneladas produzidas) foram incorporados. 
com base nisso, calculou-se a relevancia_regiao_percent para cada produto em cada região do df. 
este indicador mostra a força produtiva de uma localidade para um item específico e é usado para o score s_relev_prod, 
adicionando um critério de "qualidade" ou especialização regional à recomendação.

5. criação das matrizes e estruturas de dados:
seguindo as orientações e leituras, foram estruturados os DataFrames principais: 
df_associacoes (com dados das associações), df_nutrientes (com dados da taco e complementos),
e df_producao (com dados da emater-df). essas estruturas são a base para os filtros e cálculos de score do sistema.
a matriz de similaridade item-item, item_similarity_df, também é derivada dessas estruturas, especificamente da matriz de utilidade.

6. criação da matriz de utilidade (df_utility_pivot):
uma matriz de utilidade foi criada para simular interações (avaliações) entre consumidores e associações. 
como não havia dados reais de avaliação, e o projeto requeria um volume mínimo (ex: 5000 linhas de interações), 
essa matriz foi gerada artificialmente. consumidores_simulados foram criados, 
e cada um "avaliou" um conjunto aleatório de associações com notas de 1 a 5. a simulação tentou introduzir algum realismo, 
fazendo com que as notas tivessem uma leve tendência a seguir a avaliacao_media (também simulada) da associação, 
mas com variabilidade. essa matriz é fundamental para o componente de filtragem colaborativa.

6.5. implementação dos critérios de filtragem do usuário:
o sistema permite que o usuário defina diversos critérios para personalizar as recomendações, que são processados no método recomendar da classe SistemaRecomendacaoDF.
* filtros iniciais:
* distancia_max_km: o usuário define um raio máximo de busca.
* apenas_organicos: um booleano (True/False) para filtrar por associações com foco em orgânicos.
* produtos_desejados: uma lista dos produtos específicos que o usuário procura.
* cálculo de sub-scores para o ranking final:
* s_dist: baseado na distância calculada entre o usuário e a associação (menor distância, maior score).
* s_aval: baseado na avaliacao_media da associação.
* s_nutri: avalia se os produtos da associação atendem ao objetivo_nutricional especificado (ex: 'baixa_caloria', 'alta_vitamina_c'), usando os dados de umidade_porcento, energia_kcal, energia_kj, proteina_g, lipideos_g, colesterol_mg, carboidrato_g, fibra_alimentar_g, cinzas_g, calcio_mg, magnesio_mg, etc., da tabela nutricional.
* s_relev_prod: considera a relevancia_regiao_percent (dados da emater-df), funcionando como um indicador de "qualidade" ou especialização da região da associação nos produtos desejados.
* s_collab: score de filtragem colaborativa item-item, que recomenda associações com base na similaridade com outros itens que o consumidor (identificado por id_consumidor) já avaliou positivamente.
* personalização pelo usuário:
* localização: o usuário informa lat_usuario e lon_usuario.
* pesos dos scores: o usuário pode, através do dicionário preferencias, ajustar os pesos de cada sub-score (peso_distancia, peso_avaliacao, peso_nutricional, peso_relevancia_prod, peso_colaborativo) para definir a importância de cada critério no score_final da recomendação.
* top_n: define quantas das melhores recomendações serão exibidas.

7. visualização dos resultados:
a função criar_mapa_recomendacoes_folium_v2 gera um mapa interativo mostrando a localização do usuário, 
o raio de busca, e as associações recomendadas, com popups detalhando os scores e informações relevantes.